/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    // Apply GraalVM Native Image plugin
    id 'org.graalvm.buildtools.native' version '0.9.19'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'

    // Netty dependencies
    implementation "io.netty:netty-codec-http:$netty_version"
    implementation "io.netty:netty-transport:$netty_version"
    implementation "io.netty:netty-handler:$netty_version"
    implementation "io.netty:netty-transport-native-epoll:$netty_version:linux-x86_64"
}


application {
    // Define the main class for the application.
    mainClass = 'netty.epoll.gradle.Main'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

graalvmNative {
    binaries {
        main {
            // These classes contain functions that are implemented in native code (in libnetty_transport_native_epoll)
            buildArgs.add('--initialize-at-run-time=io.netty.channel.epoll,io.netty.channel.unix.Limits,io.netty.channel.unix.IovArray,io.netty.channel.unix.Errors')
        }
    }
}
